USE sakila;
SHOW DATABASES;
SELECT * FROM film;
-- 1. Write SQL queries to perform the following tasks using the Sakila database:
--     List the number of films per category.
SELECT c.name, COUNT(f.film_id) AS 'Number of Films'
FROM category c
LEFT JOIN film_category f ON c.category_id = f.category_id
GROUP BY c.name;
-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id, c.city_id, cy.country_id FROM store AS s
JOIN address AS a ON s.address_id = a.address_id
JOIN city AS c ON c.city_id = a.city_id
JOIN country AS cy ON cy.country_id = c.country_id;
-- 3. Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, 
       SUM(p.amount) AS total_revenue
FROM store AS s
JOIN staff AS st ON s.store_id = st.store_id
JOIN payment AS p ON st.staff_id = p.staff_id
GROUP BY s.store_id;
-- Determine the average running time of films for each category.
SELECT c.name AS category_name,
       AVG(f.length) AS average_running_time
FROM film_category AS fc
JOIN film AS f ON fc.film_id = f.film_id
JOIN category AS c ON fc.category_id = c.category_id
GROUP BY c.name;
-- Bonus:
--     Identify the film categories with the longest average running time.
--     Display the top 10 most frequently rented movies in descending order.
--     Determine if "Academy Dinosaur" can be rented from Store 1.
--     Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- 	   Include a column indicating whether each title is 'Available' or 'NOT available.' 
--     Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
